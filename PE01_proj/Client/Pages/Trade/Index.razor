@page "/trades/"
@using PE01_proj.Shared.Domain;

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using PE01_proj.Client.Static
<a href="/trades/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Creating New Trade
</a>
@if (Trades == null)
{
    <div class=" alert alert-info">Loading Trades...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Trade DateTime</th>
                <th>Total Trade Amount</th>
                <th>Staff Name</th>
                <th>Action</th>
            </tr>

        </thead>
        <tbody>
            @foreach (var trade in Trades)
            {
                <tr>
                    
                    <td>@trade.TradeDateTime.Date.ToString("dd MMMM yyyy")</td>
                    <td>@trade.TotalTradeAmount</td>
                    <td>@trade.Staffs.StaffName</td>
                    @*<td>@trade.Customers.CustName</td>*@
                    <td>
                        <a href="/trades/view/@trade.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/trades/edit/@trade.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(trade.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>

                   
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Trade> Trades;


    protected async override Task OnInitializedAsync()
    {
        Trades = await _client.GetFromJsonAsync<List<Trade>>($"{Endpoints.TradesEndpoint}");
    }
    async Task Delete(int tradeId)
    {
        var trade = Trades.First(q => q.Id == tradeId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {trade.TradeID}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.TradesEndpoint}/{tradeId}");
            await OnInitializedAsync();

        }
    }

}