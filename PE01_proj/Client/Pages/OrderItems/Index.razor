@page "/orderItems/"
@using PE01_proj.Shared.Domain;

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using PE01_proj.Client.Static

@if (OrderItems == null)
{
    <div class=" alert alert-info">Loading OrderItems...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Device Name</th>
                <th>Devcie Type</th>
                <th>Order DateTime</th>
                <th>Order Quantity</th>
              
            </tr>

        </thead>
        <tbody>
            @foreach (var orderItem in OrderItems)
            {
                <tr>
                    <td>@orderItem.Devices.DevName</td>
                    <td>@orderItem.Devices.DevType</td>
                    <td>@orderItem.Orders.OrdDateTime</td>
                    <td>@orderItem.OrderQty</td>
                   
                </tr>
            }
        </tbody>
    </table>
}
@code{
    private List<OrderItem> OrderItems;


    protected async override Task OnInitializedAsync()
    {
        OrderItems = await _client.GetFromJsonAsync<List<OrderItem>>($"{Endpoints.OrderItemsEndpoint}");
    }
    async Task Delete(int orderItemId)
    {
        var orderItem = OrderItems.First(q => q.Id == orderItemId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {orderItem.OrderQty}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrderItemsEndpoint}/{orderItemId}");
            await OnInitializedAsync();

        }
    }
	
}