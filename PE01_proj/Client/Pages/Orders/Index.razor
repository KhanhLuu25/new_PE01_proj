@page "/orders/"
@using PE01_proj.Shared.Domain;

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using PE01_proj.Client.Static
<a href="/orders/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Creating New Order
</a>
<br />
<br />
@if (Orders == null)
{
    <div class=" alert alert-info">Loading Orders...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <td>ID</td>
                <th>Customer</th>
                @*<th>DateTime</th>*@
                @*<th>Total Price</th>
                <th>Order Quantity</th>*@
                <th>Staff</th>
                <th>DateTime</th>
            </tr>

        </thead>
      
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.Customers.CustName</td>
                    @*<td>@order.OrdDateTime.Date.ToString("dd MMMM yyyy")</td>*@
                    @*<td>@order.TotalPrice</td>
                    <td>@order.Orderquantity</td>*@
                    <td>@order.Staffs.StaffName</td>
                    <td>@order.OrdDateTime.Date.ToString("dd MMMM yyyy")</td>
                    <td>
                        <a href="/orders/view/@order.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/orders/edit/@order.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(order.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code{
    private List<Order> Orders;

 

    protected async override Task OnInitializedAsync()
    {
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }
    async Task Delete(int orderId)
    {
        var order = Orders.First(q => q.Id == orderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.OrderID}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrdersEndpoint}/{orderId}");
            await OnInitializedAsync();

        }
    }
	
}